- Name: ItemAdding
  Code: |-
    Item.ShowAllPermissions = true;
    if(DatasourceCurrent!=null)
    {
        PermissionUIViewModel? permissionViewModel = (PermissionUIViewModel?) GetSubViewModel<PermissionUI>("permissions");
        if(permissionViewModel != null)
        {
            if(permissionViewModel.Methods.HasChanges() && !DatasourceCurrent.IsNew())
            {
                var choice = await ShowMessageAsync(MessageType.Warning, Resources.UserPermissions.ChangePositionSaveTitle, Resources.UserPermissions.ChangePositionFeatureSaveMessage, new MessageButton(MessageButtonType.Yes,false), new MessageButton(MessageButtonType.No,false));
                if(choice.ButtonType==MessageButtonType.Yes)
                {
                    await SaveDataAsync();
                }
                else
                {
                    AcceptChanges();
                    await LoadDataAsync();
                }
            }
        }
    }
  Event: ItemAdding
- Name: ItemRemoving
  Code: |
    if (Item.Accounts.Any())
    {
        var choice = await ShowMessageAsync(MessageType.Warning, Resources.UserPermissions.DeleteWithMessageTitle, Resources.UserPermissions.DeleteWithMessageWarningMessage, new MessageButton(MessageButtonType.Yes,false), new MessageButton(MessageButtonType.No,false));
        if(choice.ButtonType != MessageButtonType.Yes)
        {
            Arguments.Cancel = true;
        }
    }
  Event: ItemRemoving
- Name: PositionChanged
  Code: |-
    if(DatasourceCurrent!=null)
    {
        Fields.IsRoleNewOrNotSelected=DatasourceCurrent.IsNew();
        if(!DatasourceCurrent.IsNew())
        {
            PermissionUIViewModel? permissionViewModel = (PermissionUIViewModel?) GetSubViewModel<PermissionUI>("permissions");
            await permissionViewModel.Methods.OnClickMethodNodeAsync(permissionViewModel.Fields.SelectedNode);
            if(DatasourceCurrent.Id != Fields.PreviousRoleId)
            {
                permissionViewModel.Methods.DisplayAllFeatures();
                permissionViewModel.Methods.ExpandAll(null);
                Fields.PreviousRoleId = DatasourceCurrent.Id;
            }
        }
    }
  Event: PositionChanged
- Name: PositionChanging
  Code: |-
    if(DatasourceCurrent != null)
    {
        PermissionUIViewModel? permissionViewModel = (PermissionUIViewModel?) GetSubViewModel<PermissionUI>("permissions");
        if(permissionViewModel != null)
        {
            if(permissionViewModel.Methods.HasChanges() && !DatasourceCurrent.IsNew())
            {
                var choice = await ShowMessageAsync(MessageType.Warning, Resources.UserPermissions.ChangePositionSaveTitle, Resources.UserPermissions.ChangePositionFeatureSaveMessage, new MessageButton(MessageButtonType.Yes,false), new MessageButton(MessageButtonType.No,false));
                    if(choice.ButtonType == MessageButtonType.Yes)
                    {
                        await SaveDataAsync();
                        await UnselectItemAsync(Datasource[Arguments.Position]);
                        await SelectItemAsync(Datasource[Arguments.NewPosition]);
                    }
                    else
                    {
                        AcceptChanges();
                        await LoadDataAsync();
                        await UnselectItemAsync(Datasource[Arguments.Position]);
                        await SelectItemAsync(Datasource[Arguments.NewPosition]);
                    }
            }
        }
    }
  Event: PositionChanging
- Name: Retrieved
  Code: |-
    foreach(var item in Arguments.Items) {
        item.ShowAllPermissions = true;
    }
  Event: Retrieved
- Name: Retrieving
  Code: |-
    PermissionUIViewModel? permissionViewModel = (PermissionUIViewModel?) GetSubViewModel<PermissionUI>("permissions");
    permissionViewModel.Fields.FunctionTreeViewSource = await ServerMethods.GetFunctionTree.ExecuteAsync();
  Event: Retrieving
- Name: ShowAllPermissionsPropertyChanged
  Code: |-
    PermissionUIViewModel? permissionViewModel = (PermissionUIViewModel?) GetSubViewModel<PermissionUI>("permissions");
    if(permissionViewModel != null)
    {
        if(Item.ShowAllPermissions)
        {
            permissionViewModel.Methods.DisplayAllFeatures();
        }
        else
        {
            permissionViewModel.Methods.DisplayAffectedFeaturesOnly();
        }
    }
  Event: PropertyChanged
  PropertyName: ShowAllPermissions
