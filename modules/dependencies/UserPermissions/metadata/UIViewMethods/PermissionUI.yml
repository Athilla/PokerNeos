- Name: AddDefaultPermissionAsync
  Asynchronous: true
  Code: |-
    await Methods.OnClickMethodNodeAsync(node);
    PermissionUI permission = Methods.GetNodePermission(node);
    if(permission == null)
    {
        permission = await AddNewAsync();
        if(permission != null)
        {
            permission.FunctionName = node.Name;
            permission.FunctionType = node.FunctionType;
            permission.UserRoleId = GetParentItem<AssignPermissionToRolesUI>().Id;
            if(node.FunctionType == FunctionType.CRUD)
            {
                permission.HasReadOnlyAccess = true;
                permission.HasCreationAccess = true;
                permission.HasUpdateAccess = true;
                permission.HasDeleteAccess = true;
            }
            else
            {
                permission.HasAccess = true;
            }
        }
    }
  Description: Add Default Permission
  Documentation: Create a permission between the user role selected in the parent UI and the function selected in the tree-view then places the user on the new permission. If the function has a parent function and it does not have permission then an error message is sent.
- Name: BuildTreeView
  Code: |-
    if(Datasource.Any(p => p.FunctionName == node.Name) || showAll)
    {
        var displayedNode = new Transversals.Business.Application.Abstractions.DataObjects.FunctionTreeNode();
        displayedNode.Caption = node.Caption;
        displayedNode.FunctionType = node.FunctionType;
        displayedNode.Name = node.Name;
        displayedNode.Selected = node.Selected;
        displayedNode.Children = null;
        displayedNode.Expanded = false;
        displayedNode.AuthorizationCondition = node.AuthorizationCondition;
        displayedNode.Documentation = node.Documentation;

        if(Datasource.Any(p => p.FunctionName == node.Name))
        {
            Methods.SetIcon(displayedNode, Datasource.FirstOrDefault(p => p.FunctionName == node.Name));
        }

        if(parent != null)
        {
            if(parent.Children == null)
            {
                parent.Children= new List<Transversals.Business.Application.Abstractions.DataObjects.FunctionTreeNode>();
            }
            parent.Children.Add(displayedNode);
        }

        foreach(var child in node.Children)
        {
            Methods.BuildTreeView(child, displayedNode, showAll);
        }

        return displayedNode;
    }

    return null;
  DotNetReturnType: Transversals.Business.Application.Abstractions.DataObjects.FunctionTreeNode?
- Name: CollapseAll
  Code: |-
    List<Transversals.Business.Application.Abstractions.DataObjects.FunctionTreeNode> nodes;
    if(node == null)
    {
        nodes = Fields.FunctionTreeViewSource;
    }
    else
    {
        if(node.Children !=null)
        {
            nodes = (List<Transversals.Business.Application.Abstractions.DataObjects.FunctionTreeNode>)node.Children;
        }
        else
        {
             return;
        }
    }

    foreach(var childrenNode in nodes)
    {
        if(childrenNode.Children != null)
        {
            childrenNode.Expanded = false;
            Methods.CollapseAll(childrenNode);
        }
    }
- Name: DeletePermissionAsync
  Asynchronous: true
  Code: |-
    await Methods.OnClickMethodNodeAsync(node);
    PermissionUI permission = Methods.GetNodePermission(node);
    if(permission != null)
    {
        await DeleteDataAsync(Methods.GetNodePermission(node));
        node.Icon = string.Empty;
        await Methods.OnClickMethodNodeAsync(node);
    }
  Description: Delete Permission
  Documentation: Deletes the selected permission. If the feature linked to the authorization has child features then the authorizations of these child features are removed as well.
- Name: DisableChildren
  Code: |-
    FunctionTreeNode currentNode = null;
        foreach(var node in Fields.FunctionTreeViewSource) {
            FunctionTreeNode? nodeFound = Methods.GetNode(functionName, node);
            if(nodeFound != null) {
                currentNode = nodeFound;
            }
        }

            if(currentNode != null && currentNode.Children !=null) {
                foreach(var child in currentNode.Children) {
                    Transversals.Business.CSharpAbstractions.PermissionUI? permissionChild = Methods.GetNodePermission(child);
                    if(permissionChild != null) {
                        if(permissionChild.FunctionType == FunctionType.CRUD) {
                            permissionChild.HasAll = false;
                        }
                        else {
                            permissionChild.HasAccess = false;
                        }
                    }
                }
            }
- Name: DisplayAffectedFeaturesOnly
  Code: |-
    Fields.FunctionTreeViewSource = new List<FunctionTreeNode>();
    if(Fields.OriginalFunctionTreeViewSource != null
        && Fields.OriginalFunctionTreeViewSource.Any()) {
        foreach(var node in Fields.OriginalFunctionTreeViewSource) {
            var createdNode = Methods.BuildTreeView(node, null, false);
            if(createdNode != null) {
                Fields.FunctionTreeViewSource.Add(createdNode);
            }
            if(Fields.FunctionTreeViewSource.Any()) {
                Methods.OnClickMethodNodeAsync(Fields.FunctionTreeViewSource.First());
            }
        }
    }
  Description: Display Affected Features Only
  Documentation: Update the tree-view source to display only the feature that got a permission with the current user role.
- Name: DisplayAllFeatures
  Code: |
    Fields.FunctionTreeViewSource = new List<FunctionTreeNode>();
    if(Fields.OriginalFunctionTreeViewSource != null && Fields.OriginalFunctionTreeViewSource.Any())
    {
        foreach(var node in Fields.OriginalFunctionTreeViewSource)
        {
            Fields.FunctionTreeViewSource.Add(Methods.BuildTreeView(node, null, true));
        }
    }
  Description: Display All Features
  Documentation: Update the tree-view source to display all the features.
- Name: ExpandAll
  Code: |-
    List<Transversals.Business.Application.Abstractions.DataObjects.FunctionTreeNode> nodes;
    if(node == null)
    {
        nodes = Fields.FunctionTreeViewSource;
    }
    else
    {
        if(node.Children !=null)
        {
            nodes = (List<Transversals.Business.Application.Abstractions.DataObjects.FunctionTreeNode>)node.Children;
        }
        else
        {
             return;
        }
    }
    foreach(var childrenNode in nodes)
    {
        if(childrenNode.Children != null)
        {
            childrenNode.Expanded = true;
            Methods.ExpandAll(childrenNode);
        }
    }
- Name: GetNode
  Code: |-
    if(node.Name == name) {
        return node;
    }
    if( node.Children == null)
        return null;

    foreach(var child in node.Children) {
        var result = Methods.GetNode(name, child);
        if(result != null) {
            return result;
        }
    }

    return null;
  DotNetReturnType: Transversals.Business.Application.Abstractions.DataObjects.FunctionTreeNode?
- Name: GetNodePermission
  Code: return Datasource.SingleOrDefault(e => e.FunctionName == node.Name && e.UserRoleId == GetParentItem<AssignPermissionToRolesUI>().Id);
  Description: Get Node Permission
  DotNetReturnType: Transversals.Business.CSharpAbstractions.PermissionUI?
- Name: HasChanges
  Code: return HasChanges;
  Description: Has Changes
  Documentation: Return true if the view has changes
  DotNetReturnType: bool
- Name: OnClickMethodNodeAsync
  Asynchronous: true
  Code: |-
    PermissionUI? permission = Methods.GetNodePermission(node);
    if(Fields.SelectedNode != null)
    {
        Fields.SelectedNode.Selected = false;
    }

    if(node != null) {
        Fields.SelectedNode = node;
        node.Selected = true;
    }

    if(permission != null)
    {
        Position = Datasource.IndexOf(permission);
    }
    else{
        Position = -1;
    }
  Description: On Click Node Method
  Documentation: Select the permission in the datasource that correspond to the seletced user role and the feature
- Name: OnLoadMethodNodeAsync
  Asynchronous: true
  Code: await Methods.OnClickMethodNodeAsync(node);
  Description: On Load Node Method
- Name: SetAccessTextIcon
  Code: |-
    FunctionTreeNode? node = null;
    foreach(var nodes in Fields.FunctionTreeViewSource) {
        var result = Methods.GetNode(item.FunctionName, nodes);
        if(result != null) {
            node = result;
            break;
        }
    }

    Methods.SetIcon(node, item);
- Name: SetCRUD
  Code: |-
    item.HasReadOnlyAccess = value;
    item.HasCreationAccess = value;
    item.HasUpdateAccess = value;
    item.HasDeleteAccess = value;
- Name: SetIcon
  Code: |-
    if(node != null)
    {
        if(item == null)
        {
            node.Icon = string.Empty;
        }
        else
        {
            if(item.FunctionType == FunctionType.AllowDeny)
            {
                node.Icon = item.HasAccess ? "ðŸŸ¢" : "ðŸ”´";
            }

            if(item.FunctionType == FunctionType.CRUD)
            {
                if(item.HasAll == null)
                {
                    node.Icon = "ðŸŸ¡";
                }
                else
                {
                    node.Icon = item.HasAll == true ? "ðŸŸ¢" : "ðŸ”´";
                }
            }

        }
    }
- Name: UpdateHasAll
  Code: |-
    if(item != null)
    {
        if(item.HasCreationAccess && item.HasReadOnlyAccess && item.HasUpdateAccess && item.HasDeleteAccess)
        {
            item.HasAll = true;
        }
        else if(!item.HasCreationAccess && !item.HasReadOnlyAccess && !item.HasUpdateAccess && !item.HasDeleteAccess)
        {
            item.HasAll = false;
        }
        else
        {
            item.HasAll = null;
        }
        Methods.SetAccessTextIcon(item);
    }
