using GroupeIsa.Neos.Shared.Metadata;
using GroupeIsa.Neos.Shared.MultiTenant;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System;

namespace Transversals.Business.Core.Domain.Tests.UnitTests.DataBase
{
    /// <summary>
    /// <see cref="InvoiceContext"/> en mémoire.
    /// </summary>
    internal class InMemoryCoreConfigurationContext : CoreConfigurationContext
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InMemoryCoreConfigurationContext"/> class.
        /// </summary>
        /// <param name="databaseName">Database name or null for an autogenerated name.</param>
        public InMemoryCoreConfigurationContext(INeosTenantInfoAccessor neosTenantInfoAccessor, IUserInfoAccessor userInfoAccessor, IApplicationContext applicationContext, string? databaseName = null, ILoggerProvider? loggerProvider = null)
            : base(neosTenantInfoAccessor, userInfoAccessor, applicationContext, BuildDbContextOptions(databaseName, loggerProvider))
        {
        }

        /// <inheritdoc/>
        public override void Dispose()
        {
            Database.EnsureDeleted();

            base.Dispose();
        }

        private static DbContextOptions<InMemoryCoreConfigurationContext> BuildDbContextOptions(string? databaseName, ILoggerProvider? loggerProvider)
        {
            DbContextOptionsBuilder<InMemoryCoreConfigurationContext> builder = new();
            builder.UseInMemoryDatabase(databaseName: databaseName ?? Guid.NewGuid().ToString())
                .EnableSensitiveDataLogging();
            if (loggerProvider != null)
            {
                builder.UseLoggerFactory(new LoggerFactory(new[] { loggerProvider! }));
            }

            return builder.Options;
        }
    }
}
