- Name: ToggleIsActiveFilter
  Code: |-
    // Cette méthode est apellée une première fois sur l'évènement Initialized de l'UIComponent.
    // Elle est ensuite rapellée lors d'interactions utilisateur par la méthode ToggleIsActiveFilterAndLoadParentData.
    var listofProperties = GetParentViewModel().GetProperties();
    if(listofProperties.Any(p=> p.Name == "IsActive"))
    {
        Fields.IsInactiveShown = !Fields.IsInactiveShown;
        // On supprime les filtres isActive si il y en a.
        // Comme ça on se place dans un état cohérent, même si le filtre se retrouve par erreur défini plusieurs fois
        var filters = GetParentViewModel().Datafilter.Children.Where(f => f.Condition.PropertyPath == "isActive");
        foreach (var filter in filters)
        {
            GetParentViewModel().Datafilter.Remove(filter);
        }
        if(!Fields.IsInactiveShown)
        {
            GetParentViewModel().Datafilter.Add(new Filter("isActive", FilterOperator.IsTrue));
        }
    }
  Description: Gestion de l'ajout/supression du filtre sur la notion "isActive".
- Name: ToggleIsActiveFilterAndLoadParentData
  Code: |-
    // A ce jour, cette méthode est apellée lors du click sur le bouton pour afficher/masquer les items inactifs.
    var listofProperties = GetParentViewModel().GetProperties();
    if(listofProperties.Any(p=> p.Name == "IsActive"))
    {
        Methods.ToggleIsActiveFilter();
        GetParentViewModel().LoadDataAsync();
    }
  Description: "Gestion de l'ajout/supression du filtre sur la notion \"isActive\" suivie d'un rechargement des données sur le ViewModel parent. "
