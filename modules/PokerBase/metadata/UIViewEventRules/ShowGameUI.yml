- Name: Closing
  Code: |
    @Fields.Unloaded = true;

    int? gameId = (int?)ViewContext["GameId"];
    if(gameId != null)
    {
        GameEventDO myevent = new GameEventDO();
        myevent.GameId = gameId.Value;
        myevent.Event = Event.HasLeft;
        await ServerMethods.SendEvent.ExecuteAsync(myevent);
    }
  Event: Closing
- Name: GameIdPropertyChanged
  Code: |-
    if(Item.GameId != null)
    {
        Fields.ItemList =  await ServerMethods.GetDetailsGame.ExecuteAsync((int)Item.GameId);
    }
  Enabled: false
  Event: PropertyChanged
  PropertyName: GameId
- Name: Initialized
  Code: |-
    //init the game with all Cards => 0-1/2-1-2-3-5-8-13
    Fields.PokerCardList = new List<PlayingCardInformationDO>();
    for(int i=0; i<8; i++)
    {
        var card = new Abstractions.DataObjects.PlayingCardInformationDO();
        card.Valeur = Computeds.ValuesOfCard[i];
        card.Selected = false;
        //Console.WriteLine(card);
        Fields.PokerCardList.Add(card);
    }
    int? gameId = (int?)ViewContext["GameId"];
    if(gameId == null)
    {
        _= this.CloseAsync();
    }
    else
    {
        EntityViewParameters.GameId = gameId.Value;
    }
    //LoadDataAsync();
    // Console.WriteLine(Fields.PokerCardList);

    // Console.WriteLine(Datasource);
    // Console.WriteLine(this);

    GameEventDO myevent = new GameEventDO();
    myevent.GameId = EntityViewParameters.GameId;
    myevent.Event = Event.HasJoined;
    await ServerMethods.SendEvent.ExecuteAsync(myevent);

    _ = Methods.CoreGameAsync();
- Name: Retrieved
  Code: |-
    if(DatasourceCurrent?.GameId != null)
    {
        Console.WriteLine(DatasourceCurrent.GameId);
        Fields.ItemList =  await ServerMethods.GetDetailsGame.ExecuteAsync((int)DatasourceCurrent.GameId);
        Methods.InitGame();
        _ = Methods.KeepAliveAsync();
    }
  Event: Retrieved
